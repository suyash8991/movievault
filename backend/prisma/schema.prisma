// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String      @id @default(cuid())
  email     String      @unique
  username  String      @unique
  password  String
  firstName String
  lastName  String
  bio       String?     // Optional user biography
  avatarUrl String?     // Optional avatar image URL
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  watchlist Watchlist[]
  ratings   Rating[]

  @@map("users")
}

// Movie model for caching TMDb data
model Movie {
  id          Int         @id // TMDb movie ID
  title       String
  overview    String?
  releaseDate String?     // Store as string for now (YYYY-MM-DD format)
  posterPath  String?
  voteAverage Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  watchlist   Watchlist[]
  ratings     Rating[]

  @@map("movies")
}

// Watchlist model - many-to-many relationship between User and Movie
model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  movieId   Int
  addedAt   DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  // Ensure a user can only add a movie to their watchlist once
  @@unique([userId, movieId])
  @@map("watchlist")
}

// Rating model - user ratings and reviews for movies
model Rating {
  id        String   @id @default(cuid())
  userId    String
  movieId   Int
  rating    Float    // Rating score (1-10 scale to match TMDb)
  review    String?  // Optional text review
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  // Ensure a user can only rate a movie once
  @@unique([userId, movieId])
  @@map("ratings")
}
